
@{
    ViewData["Title"] = "实时监控";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Version"] = "20191219";
}
<link rel="stylesheet" type="text/css" href="http://39.104.61.84:9001/EzServerClient/lib/EzServerClient.min.css">
<link rel="stylesheet" type="text/css" href="http://39.104.61.84:9001/EzServerClient/mapDemopage/css/popup.css">
@section style{
    <!--ztree-->
    <link rel="stylesheet" href="~/lib/ztree/css/zTreeStyle/zTreeStyle.css" type="text/css">
}
<script src="http://39.104.61.84:9001/EzServerClient/lib/EzMapAPI.js"></script>
<script src="http://39.104.61.84:9001/EzServerClient/lib/EzServerClient.min.js"></script>

@section script{
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="~/plugins/ezMap/js/MapTools.js"></script>
    <!--ztree-->
    <script type="text/javascript" src="~/lib/ztree/js/jquery.ztree.core.js"></script>
    <script type="text/javascript" src="~/lib/ztree/js/jquery.ztree.exhide.js"></script>
    <script type="text/javascript" src="~/lib/ztree/js/jquery.ztree.excheck.js"></script>
    <script type="text/javascript" src="~/lib/ztree/js/jquery.ztree.exedit.js"></script>
    <script type="text/javascript" src="~/lib/ztree/demo/js/fuzzysearch.js"></script>
}
@*tree*@
<!-- Main row -->
<div class="row">
    <!-- /.col -->
    <div class="col-md-2" id="vmDeviceTree">
        <!-- Info Boxes Style 2 -->
        <!-- PRODUCT LIST -->
        <div class="box box-primary" style="width:275px;">
            <div class="box-header with-border">
                <h4 class="box-title">设备列表</h4>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <!-- /.box-header -->
            <div class="box-body">
                <input type="text" id="key" value="" style="width:100%;" class="empty" placeholder="请输入关键字" /><br />
                <ul id="treeDemo" class="ztree" style="border:0px; height:440px;width:100%; margin-top:3px; overflow:auto;"></ul>
            </div>
            <!-- /.box-body -->
        </div>
        <!-- /.box -->
    </div>
    <!-- /.col -->
    <div class="col-md-10">
        <!-- MAP & BOX PANE -->
        <div class="box box-success">
            <div class="box-header with-border">
                <h4 class="box-title">实时地图</h4>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <!-- /.box-header -->
            <div class="box-body no-padding">
                <div class="row">
                    <div class="col-md-12 col-sm-12">
                        <div class="pad">
                            <!-- Map will be created here -->
                            <!-- 提供地图容器，其中地图容器必须提供id号，用于生成地图 -->
                            <div id="map" style="width:100%;height:469px;"></div>
                        </div>
                    </div>
                    <!-- /.col -->
                </div>
                <!-- /.row -->
            </div>
            <!-- /.box-body -->
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <!-- Custom Tabs -->
        <div class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                <li class="active"><a href="#tab_1" data-toggle="tab">定位信息</a></li>
                <li><a href="#tab_2" data-toggle="tab">报警信息</a></li>
                <li><a href="#tab_3" data-toggle="tab">短报文</a></li>
                <li class="pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </li>
            </ul>
            <div class="tab-content" id="vmRealTime" style="overflow:auto; height:200px;">
                <div class="tab-pane active" id="tab_1">
                    <table class="table table-condensed">
                        <tr>
                            <th>序号</th>
                            <th>车牌号</th>
                            <th>识别码</th>
                            <th>SIM卡</th>
                            <th>时间</th>
                            <th>速度</th>
                            <th>定位</th>
                            <th>方向</th>
                            <th>状态</th>
                            <th>定位模式</th>
                            <th>累计里程</th>
                            <th>位置</th>
                            <th>经度</th>
                            <th>纬度</th>
                        </tr>
                        <tr v-for="(newtrack,index) in newtracks">
                            <td>{{index+1}}</td>
                            <td>{{newtrack.license}}</td>
                            <td>{{newtrack.mac}}</td>
                            <td>{{newtrack.sim}}</td>
                            <td>{{newtrack.gnsstime}}</td>
                            <td>{{newtrack.speed}}</td>
                            <td>{{newtrack.locate_str}}</td>
                            <td>{{newtrack.heading_str}}</td>
                            <td>{{newtrack.status}}</td>
                            <td>{{newtrack.locatemode_str}}</td>
                            <td>{{newtrack.mileage}}</td>
                            <td>{{newtrack.position}}</td>
                            <td>{{newtrack.longitude}}</td>
                            <td>{{newtrack.latitude}}</td>
                        </tr>
                    </table>
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="tab_2">
                    The European languages are members of the same family. Their separate existence is a myth.
                    For science, music, sport, etc, Europe uses the same vocabulary. The languages only differ
                    in their grammar, their pronunciation and their most common words. Everyone realizes why a
                    new common language would be desirable: one could refuse to pay expensive translators. To
                    achieve this, it would be necessary to have uniform grammar, pronunciation and more common
                    words. If several languages coalesce, the grammar of the resulting language is more simple
                    and regular than that of the individual languages.
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="tab_3">
                    Lorem Ipsum is simply dummy text of the printing and typesetting industry.
                    Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,
                    when an unknown printer took a galley of type and scrambled it to make a type specimen book.
                    It has survived not only five centuries, but also the leap into electronic typesetting,
                    remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset
                    sheets containing Lorem Ipsum passages, and more recently with desktop publishing software
                    like Aldus PageMaker including versions of Lorem Ipsum.
                </div>
                <!-- /.tab-pane -->
            </div>
            <!-- /.tab-content -->
        </div>
        <!-- nav-tabs-custom -->
    </div>
    <!-- /.col -->
</div>
<!-- /.row -->
<!--Map-->
<script>
    //定义全局变量
    var deviceList;//定位设备列表
    //获取当前用户所拥有的设备
    function getDeviceList(callback) {
        $.ajax({
            type: 'post',
            url: '@Url.Action("QueryDeviceList")',
            success: function (datas) {
                deviceList = datas;
                //if (isFunction(callback))
                callback();
            },
            error: function (e) {
                console.log(e);
            }
        });
    }
    //获取设备最后一次定位的数据
    function getLastTrackList(callback) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("QueryLastLocatedData")',
            success: function (datas) {
                //if (isFunction(callback))
                callback(datas);
            },
            error: function (e) {
                console.log(e);
            }
        });
    }
    /**
     * 这里的map为上文HTML中新建的地图容器ID号；
     * 下面一行代码便可以加载地图到browser上,前提是
     * 在EzMapAPI.js中设置了相应的参数（具体查看EzMapAPI.js）
     */
    var map = new EzMap("map");
    // 添加地图控件 (级别控制条，也可以选择不添加)
    map.showStandMapControl();
    //显示比例尺
    map.showScaleControl();
    //设置地图级别
    map.zoomTo(5);
    //设置中心点
    var centerCoord = new EzCoord(106.661876,26.609144);
    map.centerAtLatlng(centerCoord);
    //监听marker点击
    map.addMapEventListener(Ez.Event.MAP_CLICK, function(evt) {
        var pixel = evt.pixel;
        var marker = map.forEachFeatureAtPixel(pixel, function(feature, layer) {
            if (feature instanceof EzMarker) {
                return feature;
            }
        });
        if (marker) {
            //通过单击marker时打开popup
            var car = getCarByCarID(marker.gpsData.carid);
            if (car) {
                var strHtml = getGpsInfoWinContent(getCarByCarID(marker.gpsData.carid).license, marker.gpsData);
                marker.openInfoWindow(strHtml);
            }
        }
    });
    //获取当前用户所要定位的设备
    getDeviceList(function () {
        //获取设备最后一次定位的数据
        getLastTrackList(function (lastTrackList) {
            if (Array.isArray(lastTrackList)) {
                lastTrackList.forEach(function (lastTrackData, index, arr) {
                    var device = getCarByCarID(lastTrackData.carid);
                    if (device) {
                        device.lastTrackData = lastTrackData;
                        var icon = new EzIcon({
                            src: '@Url.Content("~/plugins/ezMap/images/")'+getCarStateIcon(lastTrackData),//item.iconImage
                            anchor: [0.5, 1],
                            anchorXUnits: 'fraction',
                            anchorYUnits: 'fraction',
                            opacity: 1
                        });
                        //marker点
                        var position = new EzCoord(lastTrackData.longitude, lastTrackData.latitude);
                        var marker = new EzMarker(position, icon);
                        map.addOverlay(marker);
                        device.marker = marker;
                        device.marker.gpsData = lastTrackData;
                    }
                });
            }
        });
    });
    //更新设备位置
    function updateGpsData(lastTrackData) {
        if (!checkLoLa(lastTrackData.longitude, lastTrackData.latitude)) return;
        var device = getDeviceByMac(lastTrackData.mac);
        if (device) {
            device.lastTrackData = lastTrackData;
            var newpos = new EzCoord(lastTrackData.longitude, lastTrackData.latitude);
            var icon = new EzIcon({
                            src: '@Url.Content("~/plugins/ezMap/images/")'+getCarStateIcon(lastTrackData),//item.iconImage
                            anchor: [0.5, 1],
                            anchorXUnits: 'fraction',
                            anchorYUnits: 'fraction',
                            opacity: 1
                        });
            device.marker.setIcon(icon);
            device.marker.setPoint(newpos);

            
        //更新tree的icon
        updateTreeNode(device, getCarTreeStateSkin(lastTrackData));

        //更新实时定位数据
        updateGpsTable(lastTrackData);
        }
    }
    function updateTreeNode(device, iconSkin) {
        var treeObj = $.fn.zTree.getZTreeObj("treeDemo");
        var node = treeObj.getNodeByParam("id", "car-" + device.carid, null);
        if (node) {
            node.iconSkin =iconSkin;
            treeObj.updateNode(node);
        }
    }
    //更新实时定位数据
    function updateGpsTable(lastTrackData) {
        var list = vmRealTime.newtracks;
        var isTableData = false;
        for (var i = 0; i < list.length; i++) {
            var track = list[i];
            if (track.mac == lastTrackData.mac) {
                isTableData = true;
            }
        }
        if (!isTableData) {
            var dev = getDeviceByMac(lastTrackData.mac);
            if (dev) {
                vmRealTime.newRow.license = dev.license;
                vmRealTime.newRow.mac = dev.mac;
                vmRealTime.newRow.sim = dev.sim;
                vmRealTime.newRow.gnsstime = lastTrackData.gnsstime;
                vmRealTime.newRow.speed = lastTrackData.speed;
                vmRealTime.newRow.locate_str = lastTrackData.locatE_STR;
                vmRealTime.newRow.heading_str = lastTrackData.headinG_STR;
                vmRealTime.newRow.status = lastTrackData.status;
                vmRealTime.newRow.locatemode_str = lastTrackData.locatemodE_STR;
                vmRealTime.newRow.mileage = lastTrackData.mileagE_K;
                vmRealTime.newRow.position = lastTrackData.position;
                vmRealTime.newRow.longitude = lastTrackData.longitude;
                vmRealTime.newRow.latitude = lastTrackData.latitude;
                vmRealTime.addRow();
            }
        } else {
            for (var i = 0; i < list.length; i++) {
                var track = list[i];
                if (track.mac == lastTrackData.mac) {
                    track.gnsstime = lastTrackData.gnsstime;
                    track.speed = lastTrackData.speed;
                    track.locate_str = lastTrackData.locatE_STR;
                    track.heading_str = lastTrackData.headinG_STR;
                    track.status = lastTrackData.status;
                    track.locatemode_str = lastTrackData.locatemodE_STR;
                    track.mileage = lastTrackData.mileagE_K;
                    track.position = lastTrackData.position;
                    track.longitude = lastTrackData.longitude;
                    track.latitude = lastTrackData.latitude;
                    vmRealTime.$set(vmRealTime.newtracks, i, track);
                }
            }
        }
    }
    //根据Mac获取设备
    function getDeviceByMac(mac) {
        if (Array.isArray(deviceList)) {
            for (var i = 0; i < deviceList.length; i++) {
                if (deviceList[i].mac === mac) {
                    return deviceList[i];
                }
            }
        }
    }
    //根据carid获取车辆
    function getCarByCarID(carid) {
        if (Array.isArray(deviceList)) {
            for (var i = 0; i < deviceList.length; i++) {
                if (deviceList[i].carid === carid) {
                    return deviceList[i];
                }
            }
        }
    }
    //marker的popup
    function getGpsInfoWinContent(title, gpsData) {
        //var html = $("#divPopup").html();
            var tmpArr = [
                "速度：" + gpsData.speed + "Km/h&nbsp;&nbsp;[" + gpsData.heading_str + "]",
                "里程：" + gpsData.mileage_k + "Km",
                "定位：" + gpsData.locate_str + " [" + gpsData.locatemode_str + "]",
                "坐标：" + gpsData.longitude + "，" + gpsData.latitude,
                "时间：" + gpsData.gnsstime,
                "地点：" + gpsData.position
            ];

        return title;
    }
</script>
<!--Signal-->
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/mapHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();
    connection.start().then(() => { connection.invoke("Login"); }).catch(err => console.error(err.toString()));
    connection.on("ReceiveGpsData", function (data) {
        console.log(data);
        updateGpsData(data);
    });
</script>
<!--VUE-->
<script>
    var vmRealTime = new Vue({
        el: '#vmRealTime',
        data: {
            checkAll: false,// 是否全选
            checkedRows: [],// 选中的行标，用于删除行
            newtracks: [],// 表格数据
            newRow: {}// 新增的行数据，用于新增行
        },
        methods: {
            queryRealTimeData: function () {

            },
            addRow: function () {
                this.newtracks.push(this.newRow);//新行数据追加至表格数据数组中
                this.newRow = {};//新行数据置空
            }
        }
    });
    var vmDeviceTree = new Vue({
        el: '#vmDeviceTree',
        data: {
            deviceData: [],
        },
        methods: {
            queryDeviceData: function () {
                axios.post('@Url.Action("QueryDeviceTree")')
                    .then(function (response) {
                        this.deviceData = response.data; //debugger;
                        $.fn.zTree.init($("#treeDemo"), setting, deviceData);
                        fuzzySearch('treeDemo', '#key', null, true); //初始化模糊搜索方法
                    })
                    .catch(function (error) { // 请求失败处理
                        console.log(error);
                    });
            }
        },
        mounted: function () {
            this.queryDeviceData();
        }
    });
</script>
<!--Jquery-->
<script>
    var setting = {
        check: {
            enable: true//checkbox
        },
        view: {
            nameIsHTML: true, //允许name支持html
            selectedMulti: false
        },
        edit: {
            enable: false,
            editNameSelectAll: false
        },
        data: {
            simpleData: {
                enable: true
            }
        }
    };
</script>
