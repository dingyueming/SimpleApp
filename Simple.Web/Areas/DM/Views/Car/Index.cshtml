
@{
    ViewData["Title"] = ViewData["Title"] ?? "车辆信息管理";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Version"] = "20200106";
}

@section style{
    <!--vue-treeselect-->
    <link rel="stylesheet" href="~/lib/vue-treeselect/dist/vue-treeselect.min.css">
}
@section script{
    <!--vue-treeselect-->
    <script src="~/lib/vue-treeselect/dist/vue-treeselect.umd.min.js"></script>
    <!--simplehelper-->
    <script src="~/dist/js/simpleHelper.js"></script>
}
<div class="box" id="vmBox">
    <table style="margin-left:5px;">
        <tr>
            <th>单位：</th>
            <td>
                <div class="input-group">
                    <!-- /btn-group -->
                    <treeselect v-model="searchWhere.unitid" style="width:300px;" :multiple="false" name="searchUnitid" id="searchUnitid" v-on:select="treeSelect" :options="options" />
                </div>
            </td>
            <th>车牌号:</th>
            <td>
                <div class="input-group">
                    <!-- /btn-group -->
                    <input type="text" class="form-control" v-model="searchWhere.name">
                </div>
            </td>
            <th>设备号：</th>
            <td>
                <div class="input-group">
                    <!-- /btn-group -->
                    <input type="text" class="form-control" v-model="searchWhere.code">
                </div>

            </td>
            <td>
                <button type="button" id="btn_delete_main" class="btn btn-primary" style="margin:10px;" v-on:click="select">查询</button>
                <button type="button" id="btn_add_main" class="btn btn-success" style="margin:10px;" data-toggle="modal" v-on:click="add">新增</button>
                <button type="button" id="btn_delete_main" class="btn btn-warning" style="margin:10px;" v-on:click="deleteSelect">删除</button>
            </td>
        </tr>
    </table>
    <v-table is-vertical-resize
             :vertical-resize-offset='60'
             is-horizontal-resize
             style="width:100%"
             :multiple-sort="false"
             :min-height="350"
             even-bg-color="#f2f2f2"
             :title-rows="tableConfig.titleRows"
             :columns="tableConfig.columns"
             :table-data="tableConfig.tableData"
             row-hover-color="#eee"
             row-click-color="#edf7ff"
             :select-all="selectALL"
             :select-change="selectChange"
             :select-group-change="selectGroupChange"
             v-on:sort-change="sortChange"
             :paging-index="(pageIndex-1)*pageSize"></v-table>
    <div style="margin-top:5px;">
        <v-pagination v-on:page-change="pageChange" v-on:page-size-change="pageSizeChange" :page-size-option="[15,20,30]" :total="total" :page-size="pageSize" :layout="['total', 'prev', 'pager', 'next', 'sizer', 'jumper']"></v-pagination>
    </div>

    <!-- 模态框（Modal） -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" data-backdrop="static" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="myModalLabel">车辆管理</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal" role="form" id="myForm">
                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="license">车牌号</label>
                            <div class="col-sm-4">
                                <input class="form-control" v-model="row.license" id="license" name="license" type="text" placeholder="车牌号" />
                            </div>
                            <label class="col-sm-2 control-label" for="mac">识别码</label>
                            <div class="col-sm-4">
                                <input class="form-control" id="mac" name="mac" v-model="row.mac" type="text" placeholder="识别码" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="sim">SIM卡号</label>
                            <div class="col-sm-4">
                                <input class="form-control" id="sim" name="sim" v-model="row.sim" type="text" placeholder="SIM卡号" />
                            </div>
                            <label class="col-sm-2 control-label" for="engineno">发动机号</label>
                            <div class="col-sm-4">
                                <input class="form-control" id="engineno" name="engineno" v-model="row.engineno" type="text" placeholder="发动机号" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="chassisno">车架号</label>
                            <div class="col-sm-4">
                                <input class="form-control" id="chassisno" name="chassisno" v-model="row.chassisno" type="text" placeholder="车架号" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="status" class="col-sm-2 control-label">所属单位</label>
                            <div class="col-sm-10">
                                <treeselect v-model="row.unitid" name="unitid" :multiple="false" v-on:select="treeSelect" :options="options" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="cardesc" class="col-sm-2 control-label">备注</label>
                            <div class="col-sm-10">
                                <textarea class="form-control" id="cardesc" v-model="row.cardesc" placeholder="备注"></textarea>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">关闭</button>
                    <button type="button" class="btn btn-primary" v-on:click="operateData">提交</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal -->
    </div>

    <!--分配报警区域 -->
    <div class="modal fade" id="alarmModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" data-backdrop="static" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="myModalLabel">报警区域分配</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal" role="form">
                        <div class="form-group">
                            <label class="col-sm-2 control-label">车辆</label>
                            <div class="col-sm-10">
                                <label class="col-sm-3 control-label"> {{row.license}}</label>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="remark" class="col-sm-2 control-label">报警类型</label>
                            <div class="col-sm-4">
                                <select id="alarmStatus" v-model="carArea.alarmtype" class="form-control">
                                    <option value="0">入区报警</option>
                                    <option value="1">出区报警</option>
                                    <option value="2">出入报警</option>
                                </select>
                            </div>
                            <label for="remark" class="col-sm-2 control-label">区域状态</label>
                            <div class="col-sm-4">
                                <select id="status" v-model="carArea.status" class="form-control">
                                    <option value="1">启用</option>
                                    <option value="0">停用</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="remark" class="col-sm-2 control-label">报警区域</label>
                            <div class="col-sm-10">
                                <treeselect v-model="carArea.areaid" name="areaid" :multiple="false" :normalizer="normalizer" :options="alarmAreaOptions" />
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">关闭</button>
                    <button type="button" class="btn btn-primary" v-on:click="saveCarArea">绑定</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal -->
    </div>
</div>
<script>
    // VUE-TREESELECT
    Vue.component('treeselect', VueTreeselect.Treeselect);
    // 自定义列组件
    Vue.component('table-operation', {
        template: `<span>
        <a href="" v-on:click.stop.prevent="update(rowData,index)">编辑</a>&nbsp;
        <a href="" v-on:click.stop.prevent="deleteRow(rowData,index)">删除</a>
        </span>`,
        //<a href="" v-on:click.stop.prevent="setAlarmArea(rowData,index)">设置报警区域</a>&nbsp;
        props: {
            rowData: {
                type: Object
            },
            field: {
                type: String
            },
            index: {
                type: Number
            }
        },
        methods: {
            setAlarmArea() {
                vm.row = this.rowData;
                vm.pageMode = "edit";
                $('#alarmModal').modal();
                // 参数根据业务场景随意构造
                let params = { type: 'edit', index: this.index, rowData: this.rowData };
                this.$emit('on-custom-comp', params);
            },
            update() {
                vm.validataForm();
                vm.row = this.rowData;
                vm.pageMode = "edit";
                $('#myModal').modal();
                // 参数根据业务场景随意构造
                let params = { type: 'edit', index: this.index, rowData: this.rowData };
                this.$emit('on-custom-comp', params);
            },
            deleteRow() {
                vm.row = this.rowData;
                vm.pageMode = "delete";
                vm.operateData(vm.row);
                // 参数根据业务场景随意构造
                let params = { type: 'delete', index: this.index };
                this.$emit('on-custom-comp', params);

            },
        }
    });
    var vm = new Vue({
        el: "#vmBox",
        data: {
            pageMode: 'add',
            total: 0,
            pageIndex: 1,
            pageSize: 15,
            tableConfig: {
                multipleSort: false,
                tableData: [
                ],
                columns: [
                    { width: 60, titleAlign: 'center', columnAlign: 'center', type: 'selection' },
                    {
                        field: 'custome', title: '序号', width: 50, titleAlign: 'center', columnAlign: 'center',
                        formatter: function (rowData, index, pagingIndex) {
                            var currentIndex = index + pagingIndex;
                            return '<span style="color:red;font-weight: bold;">' + (currentIndex + 1) + '</span>';
                        }, isFrozen: false
                    },
                    {
                        field: 'unit.unitname', title: '单位', width: 150, titleAlign: 'center', columnAlign: 'center', isResize: true, formatter: function (rowData, index, pagingIndex) {
                            if (rowData.unit != null) {
                                return rowData.unit.unitname;
                            }
                            return "";
                        }
                    },
                    { field: 'license', title: '车牌号', width: 100, titleAlign: 'center', columnAlign: 'center', isResize: true },
                    { field: 'mac', title: '设备号', width: 100, titleAlign: 'center', columnAlign: 'center', isResize: true },
                    { field: 'engineno', title: '发动机号', width: 180, titleAlign: 'center', columnAlign: 'center', isResize: true },
                    { field: 'chassisno', title: '车架号', width: 150, titleAlign: 'center', columnAlign: 'center', isResize: true },
                    {
                        field: 'area', title: '报警区域', width: 150, titleAlign: 'center', columnAlign: 'left', isResize: true, formatter: function (rowData, index, pagingIndex) {
                            var html = "";
                            var text = "";
                            if (rowData.areas.length > 0) {
                                for (var i = 0; i < rowData.areas.length; i++) {
                                    html += '<span style="color:red;font-weight: normal;">' + rowData.areas[i].areaname + ',</span>';
                                    text += rowData.areas[i].areaname+",";
                                }
                            }
                            return "<div title='" + text + "'>" + html + "</div>";
                        }
                    },
                    { field: 'custome-adv', title: '操作', width: 200, titleAlign: 'center', columnAlign: 'center', componentName: 'table-operation', isResize: true },
                ],
                titleRows: [

                ],
            },
            row: {},
            selectedRows: [],
            options: [],
            searchWhere: {
                name: '',
                unitid: null,
                code: ''
            },
            alarmAreaOptions: [],
            carArea: { alarmtype: 2, status: 1,areaid: null },
        },
        methods: {
            normalizer(node) {
                return {
                    id: node.AREAID,
                    label: node.AREANAME,
                }
            },
            getTableData() {
                var strWhere = ' and a.license like \'%' + this.searchWhere.name + '%\'';
                if (this.searchWhere.unitid != null) {
                    var node = recuTreeSelectNodes(this.searchWhere.unitid, this.options);
                    var ids = getUnitChildrenId(node);
                    strWhere += ' and a.unitid  in (' + ids.join(',') + ')';
                }
                if ($.trim(this.searchWhere.code) != "") {
                    strWhere += ' and a.mac like \'%' + this.searchWhere.code + '%\'';
                }
                var search = { pageIndex: this.pageIndex, pageSize: this.pageSize, where: strWhere, orderBy: ' a.carid desc' };
                axios.post('@Url.Action("Query")', Qs.stringify(search)).then(function (response) {
                    var pagination = response.data;
                    vm.tableConfig.tableData = pagination.data;
                    vm.total = pagination.total;
                }).catch(function (error) {
                    console.log(error);
                });
            },
            pageChange(pageIndex) {
                this.pageIndex = pageIndex;
                this.getTableData();
            },
            pageSizeChange(pageSize) {
                this.pageIndex = 1;
                this.pageSize = pageSize;
                this.getTableData();
            },
            sortChange(params) {
                if (params.height.length > 0) {
                    this.tableConfig.tableData.sort(function (a, b) {

                        if (params.height === 'asc') {

                            return a.height - b.height;
                        } else if (params.height === 'desc') {

                            return b.height - a.height;
                        } else {

                            return 0;
                        }
                    });
                }
            },
            selectALL(selection){
                console.log('select-aLL', selection);
                this.selectedRows = selection;
            },
            selectChange(selection,rowData){
                console.log('select-change', selection, rowData);
                this.selectedRows = selection;
            },
            selectGroupChange(selection){
                console.log('select-group-change',selection);
            },
            add() {
                this.validataForm();
                this.pageMode = 'add'; this.row = { };
                $('#myModal').modal({ backdrop: 'static' });
            },
            operateData() {
                if (this.pageMode !="delete") {
                    $('#myForm').data('bootstrapValidator').validate();//启用验证
                    var flag = $('#myForm').data('bootstrapValidator').isValid()//验证是否通过true/false
                    if (!flag) {
                        return;
                    }
                }
                var url = '';
                switch (this.pageMode) {
                    case "edit":
                        url = '@Url.Action("Update")';
                        break;
                    case "delete":
                        url = '@Url.Action("Delete")';
                        if (!confirm('确认删除吗')) {
                            url = undefined;
                        }
                        break;
                    default:
                        url = '@Url.Action("Add")';
                        break;
                }
                if (url) {
                    axios.post(url, Qs.stringify(this.row)).then(function (response) {
                        var commonResult = response.data;
                        if (commonResult.isSuccess) {
                            $('#myModal').modal('hide');
                            vm.getTableData();
                        } else {
                            vm.$message.error(commonResult.message);
                        }
                    }).catch(function (error) {
                        console.log(error);
                    });
                }
            },
            deleteSelect() {
                if (Array.isArray(this.selectedRows) && this.selectedRows.length > 0) {
                    if (confirm('确认删除吗')) {
                        axios.post('@Url.Action("BatchDelete")', Qs.stringify({ exEntities: this.selectedRows })).then(function (response) {
                            var commonResult = response.data;
                            if (commonResult.isSuccess) {
                                $('#myModal').modal('hide');
                                vm.getTableData();
                            } else {
                                vm.$message.error(commonResult.message);
                            }
                        }).catch(function (error) {
                            console.log(error);
                        });
                    }
                }
            },
            select() {
                this.pageIndex = 1;
                this.getTableData();
            },
            treeSelect(node) {
                //this.row.p_ORG_CODE = node.tag;
            },
            queryUnitTree() {
                axios.post('@Url.Action("QueryUnitTree")', {}).then(function (response) {
                    vm.options = response.data;
                }).catch(function (error) {
                    console.log(error);
                });
            },
            queryAlarmArea() {
                axios.post('@Url.Action("QueryAlarmArea")', {}).then(function (response) {
                    vm.alarmAreaOptions = response.data;
                }).catch(function (error) {
                    console.log(error);
                });
            },
            saveCarArea() {
                if (this.carArea.areaid == null) {
                    alert("请选择报警区域");
                    return;
                }
                this.carArea.carid = this.row.carid;
                axios.post('@Url.Action("SaveCarArea")', Qs.stringify(this.carArea)).then(function (response) {
                    var commonResult = response.data;
                    if (commonResult.isSuccess) {
                        $('#myModal').modal('hide');
                        vm.getTableData();
                    } else {
                        vm.$message.error(commonResult.message);
                    }
                }).catch(function (error) {
                    console.log(error);
                });
                //重置一下
                this.carArea = { alarmtype: 2, status: 1, areaid: null };
            },
            validataForm() {
                //表单验证
                $('#myForm').bootstrapValidator({
                    message: '',
                    feedbackIcons: {
                        valid: 'glyphicon glyphicon-ok',
                        invalid: 'glyphicon glyphicon-remove',
                        validating: 'glyphicon glyphicon-refresh'
                    },
                    fields: {
                        license: {
                            validators: {
                                notEmpty: {
                                    message: '车牌号不能位空'
                                }
                            }
                        },
                        mac: {
                            validators: {
                                notEmpty: {
                                    message: '识别码不能位空'
                                }
                            }
                        },
                        unitid: {
                            validators: {
                                notEmpty: {
                                    message: '单位不能位空'
                                }
                            }
                        }
                    }
                });
            }
        },
        mounted() {
            this.getTableData();
            this.queryUnitTree();
            this.queryAlarmArea();
        },
    });
</script>

