
@{
    ViewData["Title"] = "区域报警设置";
    ViewData["Version"] = "20200218";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section style{
    <!--map-->
    @foreach (var item in ViewBag.MapCss as List<string>)
    {
        <link rel="stylesheet" type="text/css" href="@item">
    }
    <!--vue-treeselect-->
    <link rel="stylesheet" href="~/lib/vue-treeselect/dist/vue-treeselect.min.css">
}
@section script{
    <!--map-->
    @foreach (var item in ViewBag.MapJs as List<string>)
    {
        <script src="@item"></script>
    }
    <!--simplehelper-->
    <script src="~/dist/js/simpleHelper.js"></script>
    <!--vue-treeselect-->
    <script src="~/lib/vue-treeselect/dist/vue-treeselect.umd.min.js"></script>
}
<div class="box" id="vmBox">
    <table style="margin-left:5px;">
        <tr>
            <th>区域名称:</th>
            <td>
                <div class="input-group">
                    <!-- /btn-group -->
                    <input type="text" class="form-control" v-model="searchWhere.areaname">
                </div>
            </td>
            <td>
                <button type="button" id="btn_delete_main" class="btn btn-primary" style="margin:10px;" v-on:click="select">查询</button>
                <button type="button" id="btn_add_main" class="btn btn-success" style="margin:10px;" data-remote="@Url.Action("AddOrEdit")" data-toggle="modal" onclick="vm.pageMode = 'add';vm.row = []; " data-target="#myModal">新增</button>
                <button type="button" id="btn_delete_main" class="btn btn-warning" style="margin:10px;" v-on:click="deleteSelect">删除</button>
            </td>
        </tr>
    </table>
    <v-table is-vertical-resize
             :vertical-resize-offset='60'
             is-horizontal-resize
             style="width:100%"
             :multiple-sort="false"
             :min-height="350"
             even-bg-color="#f2f2f2"
             :title-rows="tableConfig.titleRows"
             :columns="tableConfig.columns"
             :table-data="tableConfig.tableData"
             row-hover-color="#eee"
             row-click-color="#edf7ff"
             :select-all="selectALL"
             :select-change="selectChange"
             v-on:sort-change="sortChange"
             :paging-index="(pageIndex-1)*pageSize"></v-table>
    <div style="margin-top:5px;">
        <v-pagination v-on:page-change="pageChange" v-on:page-size-change="pageSizeChange" :page-size-option="[15,20,30]" :total="total" :page-size="pageSize" :layout="['total', 'prev', 'pager', 'next', 'sizer', 'jumper']"></v-pagination>
    </div>
    <!--模态窗口-->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" data-backdrop="static" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content"></div>
        </div>
    </div>
    <!--模态窗口-->
    <div class="modal fade" id="myModal2" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" style="float:left" id="myModalLabel">区域绑定车辆列表</h4>
                    <div style="float:right;"><button style="right:0px;" data-toggle="modal" data-target="#carModal" class="btn btn-success">绑定车辆</button></div>
                </div>
                <div class="modal-body">
                    <div style="height:450px; overflow-y:auto;">
                        <table class="table">
                            <tr>
                                <th>序号</th>
                                <th>车牌号</th>
                                <th>MAC</th>
                                <th>单位</th>
                            </tr>
                            <tr v-for="(item,index) in row.Devices">
                                <td>{{index+1}}</td>
                                <td>{{item.LICENSE}}</td>
                                <td>{{item.MAC}}</td>
                                <td>{{item.UNITNAME}}</td>
                                <td><a href="javascript:void();" v-on:click="removeBind(item.CARID)">解除绑定</a></td>
                            </tr>
                        </table>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="carModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document" style="width:1000px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="myModalLabel">车辆列表</h4>
                </div>
                <div class="modal-body">
                    <table style="margin-left:5px;">
                        <tr>
                            <th>单位：</th>
                            <td>
                                <div class="input-group">
                                    <!-- /btn-group -->
                                    <treeselect v-model="carTableSearchWhere.unitid" style="width:200px;" :multiple="false" name="searchUnitid" id="searchUnitid" :options="options" />
                                </div>
                            </td>
                            <th>车牌号:</th>
                            <td>
                                <div class="input-group">
                                    <!-- /btn-group -->
                                    <input type="text" class="form-control" v-model="carTableSearchWhere.name">
                                </div>
                            </td>
                            <th>设备号：</th>
                            <td>
                                <div class="input-group">
                                    <!-- /btn-group -->
                                    <input type="text" class="form-control" v-model="carTableSearchWhere.code">
                                </div>
                            </td>
                            <td>
                                <button type="button" id="btn_delete_main" class="btn btn-primary" style="margin:10px;" v-on:click="carTableSelect">查询</button>
                                <button type="button" id="btn_delete_main" class="btn btn-success" style="margin:10px;" v-on:click="bindCar">绑定</button>
                            </td>
                        </tr>
                    </table>
                    <v-table is-vertical-resize
                             :vertical-resize-offset='60'
                             is-horizontal-resize
                             style="width:100%"
                             :multiple-sort="false"
                             :min-height="350"
                             even-bg-color="#f2f2f2"
                             :title-rows="carTableConfig.titleRows"
                             :columns="carTableConfig.columns"
                             :table-data="carTableConfig.tableData"
                             row-hover-color="#eee"
                             row-click-color="#edf7ff"
                             :select-all="carTableSelectALL"
                             :select-change="carTableSelectChange"
                             :paging-index="(carTableConfig.pageIndex-1)*carTableConfig.pageSize"></v-table>
                    <div style="margin-top:5px;">
                        <v-pagination v-on:page-change="carTablePageChange" v-on:page-size-change="carTablePageSizeChange" :page-size-option="[10,20,30]" :total="carTableConfig.total" :page-size="carTableConfig.pageSize" :layout="['total', 'prev', 'pager', 'next', 'sizer', 'jumper']"></v-pagination>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    Vue.component('treeselect', VueTreeselect.Treeselect);
    // 自定义列组件
    Vue.component('table-operation', {
        template: `<span>
        <a href="" v-on:click.stop.prevent="viewDevice(rowData,index)">查看绑定车辆</a>&nbsp;&nbsp;
        <a href="" v-on:click.stop.prevent="view(rowData,index)">查看报警区域</a>&nbsp;&nbsp;
        <a href="" v-on:click.stop.prevent="deleteRow(rowData,index)">删除</a>
        </span>`,
        props: {
            rowData: {
                type: Object
            },
            field: {
                type: String
            },
            index: {
                type: Number
            }
        },
        methods: {
            view() {
                vm.row = this.rowData;
                vm.pageMode = "view";
                $('#myModal').modal({
                    remote: "@Url.Action("AddOrEdit")?r="+Math.random(),
                    backdrop: 'static'
                });

                // 参数根据业务场景随意构造
                let params = { type: 'edit', index: this.index, rowData: this.rowData };
                this.$emit('on-custom-comp', params);
            },
            viewDevice() {
                vm.row = this.rowData;
                $('#myModal2').modal();
                // 参数根据业务场景随意构造
                let params = { type: 'edit', index: this.index, rowData: this.rowData };
                this.$emit('on-custom-comp', params);
            },
            deleteRow() {
                vm.row = this.rowData;
                vm.selectedRows.push(vm.row);
                vm.deleteSelect();
                // 参数根据业务场景随意构造
                let params = { type: 'delete', index: this.index };
                this.$emit('on-custom-comp', params);

            },
        }
    });
    var vm = new Vue({
        el: "#vmBox",
        data: {
            pageMode: "",
            total: 0,
            pageIndex: 1,
            pageSize: 15,
            tableConfig: {
                multipleSort: false,
                tableData: [
                ],
                columns: [
                    { width: 60, titleAlign: 'center', columnAlign: 'center', type: 'selection' },
                    {
                        field: 'custome', title: '序号', width: 50, titleAlign: 'center', columnAlign: 'center',
                        formatter: function (rowData, index, pagingIndex) {
                            var currentIndex = index + pagingIndex;
                            return '<span style="color:red;font-weight: bold;">' + (currentIndex + 1) + '</span>';
                        }, isFrozen: false
                    },
                    { field: 'AREANAME', title: '区域名称', width: 100, titleAlign: 'center', columnAlign: 'center', isResize: true },
                    { field: 'Count', title: '区域绑定设备数', width: 100, titleAlign: 'center', columnAlign: 'center', isResize: true },
                    { field: 'custome-adv', title: '操作', width: 200, titleAlign: 'center', columnAlign: 'center', componentName: 'table-operation', isResize: true },
                ],
                titleRows: [

                ],
            },
            carTableConfig: {
                total: 0,
                pageIndex: 1,
                pageSize: 10,
                multipleSort: false,
                tableData: [
                ],
                columns: [
                    { width: 60, titleAlign: 'center', columnAlign: 'center', type: 'selection' },
                    {
                        field: 'custome', title: '序号', width: 50, titleAlign: 'center', columnAlign: 'center',
                        formatter: function (rowData, index, pagingIndex) {
                            var currentIndex = index + pagingIndex;
                            return '<span style="color:red;font-weight: bold;">' + (currentIndex + 1) + '</span>';
                        }, isFrozen: false
                    },
                    {
                        field: 'unit.unitname', title: '单位', width: 150, titleAlign: 'center', columnAlign: 'center', isResize: true, formatter: function (rowData, index, pagingIndex) {
                            if (rowData.unit != null) {
                                return rowData.unit.unitname;
                            }
                            return "";
                        }
                    },
                    { field: 'license', title: '车牌号', width: 100, titleAlign: 'center', columnAlign: 'center', isResize: true },
                    { field: 'mac', title: '设备号', width: 100, titleAlign: 'center', columnAlign: 'center', isResize: true },
                    { field: 'engineno', title: '发动机号', width: 180, titleAlign: 'center', columnAlign: 'center', isResize: true },
                    { field: 'chassisno', title: '车架号', width: 150, titleAlign: 'center', columnAlign: 'center', isResize: true },
                ],
                titleRows: [],
                selectedRows: [],
            },
            row: {},
            selectedRows: [],
            options: [],
            searchWhere: { areaname: '', },
            carTableSearchWhere: {
                name: '',
                unitid: null,
                code: '',
                carId:[]
            },
            map: {
                points: [],
            },
        },
        methods: {
            getTableData() {
                var search = { pageIndex: this.pageIndex, pageSize: this.pageSize, where: ' and a.areaname like \'%' + this.searchWhere.areaname + '%\'', orderBy: ' a.areaid desc' };
                axios.post('@Url.Action("Query")', Qs.stringify(search)).then(function (response) {
                    var pagination = response.data;
                    vm.tableConfig.tableData = pagination.Data;
                    vm.total = pagination.Total;
                }).catch(function (error) {
                    console.log(error);
                });
            },
            getCarTableData() {
                var strWhere = ' and a.license like \'%' + this.carTableSearchWhere.name + '%\'';
                if (this.row.Devices.length > 0) {
                    var carIds = [];
                    for (var i = 0; i < this.row.Devices.length; i++) {
                        carIds.push(this.row.Devices[i].CARID);
                    }
                    strWhere += 'and a.carid not in (' + carIds.join(',') + ')';
                }
                if (this.carTableSearchWhere.unitid != null) {
                    var node = recuTreeSelectNodes(this.carTableSearchWhere.unitid, this.options);
                    var ids = getUnitChildrenId(node);
                    strWhere += ' and a.unitid  in (' + ids.join(',') + ')';
                }
                if ($.trim(this.carTableSearchWhere.code) != "") {
                    strWhere += ' and a.mac like \'%' + this.carTableSearchWhere.code + '%\'';
                }
                var search = { pageIndex: this.carTableConfig.pageIndex, pageSize: this.carTableConfig.pageSize, where: strWhere, orderBy: ' a.carid desc' };
                axios.post('@Url.Action("Query","Car")', Qs.stringify(search)).then(function (response) {
                    var pagination = response.data;
                    vm.carTableConfig.tableData = pagination.data;
                    vm.carTableConfig.total = pagination.total;
                }).catch(function (error) {
                    console.log(error);
                });
            },
            pageChange(pageIndex) {
                this.pageIndex = pageIndex;
                this.getCarTableData();
            },
            carTablePageChange(pageIndex) {
                this.carTableConfig.pageIndex = pageIndex;
                this.getTableData();
            },
            carTablePageSizeChange(pageSize) {
                this.carTableConfig.pageIndex = 1;
                this.carTableConfig.pageSize = pageSize;
                this.getCarTableData();
            },
            pageSizeChange(pageSize) {
                this.pageIndex = 1;
                this.pageSize = pageSize;
                this.getTableData();
            },
            sortChange(params) {

            },
            selectALL(selection){
                this.selectedRows = selection;
            },
            carTableSelectALL(selection) {
                this.carTableConfig.selectedRows = selection;
            },
            selectChange(selection,rowData){
                this.selectedRows = selection;
            },
            carTableSelectChange(selection, rowData) {
                this.carTableConfig.selectedRows = selection;
                console.log(this.carTableConfig.selectedRows);
            },
            deleteSelect() {
                if (Array.isArray(this.selectedRows) && this.selectedRows.length > 0) {
                    if (confirm('确认删除吗')) {
                        axios.post('@Url.Action("BatchDelete")', Qs.stringify({ exEntities: this.selectedRows })).then(function (response) {
                            var commonResult = response.data;
                            if (commonResult.isSuccess) {
                                $('#myModal').modal('hide');
                                vm.getTableData();
                                this.selectedRows = [];
                            } else {
                                alert(commonResult.message);
                            }
                        }).catch(function (error) {
                            console.log(error);
                        });
                    }
                }
            },
            select() {
                this.pageIndex = 1;
                this.getTableData();
            },
            carTableSelect() {
                this.carTableConfig.pageIndex = 1;
                this.getCarTableData();
            },
            saveAreaAlarm() {
                var areaName = $("#areaName").val();
                if ($.trim(areaName) == "" || vm.map.points.length == 0) {
                    alert("确定已经输入区域名称以及在地图上画好区域");
                    return;
                }
                var model = { areaName: areaName };
                 switch ($("#drawtype").val()) {
                    case "drawRect":
                        model.areatype = 0;
                        break;
                    case "drawCircle":
                        model.areatype = 2;
                        break;
                    default:
                        model.areatype = 1;
                        break;
                }
                axios.post('@Url.Action("add")', Qs.stringify({ exEntitiy: model, points: vm.map.points })).then(function (response) {
                    var commonResult = response.data;
                    if (commonResult.isSuccess) {
                        $('#myModal').modal('hide');
                        vm.getTableData();
                    } else {
                        vm.$message.error(commonResult.message);
                    }
                }).catch(function (error) {
                    console.log(error);
                });
            },
            removeBind(carId) {
                axios.post('@Url.Action("RemoveBind")', Qs.stringify({ carId: carId})).then(function (response) {
                    var commonResult = response.data;
                    if (commonResult.isSuccess) {
                        $('#myModal2').modal('hide');
                        vm.getTableData();
                    } else {
                        vm.$message.error(commonResult.message);
                    }
                }).catch(function (error) {
                    console.log(error);
                });
            },
            queryUnitTree() {
                axios.post('@Url.Action("QueryUnitTree")', {}).then(function (response) {
                    vm.options = response.data;
                }).catch(function (error) {
                    console.log(error);
                });
            },
            bindCar() {
                var carSelectRows = this.carTableConfig.selectedRows;
                if (carSelectRows.length > 0) {
                    axios.post('@Url.Action("BindCars")', Qs.stringify({ cars: carSelectRows, areaId: this.row.AREAID, alarmType:2 })).then(function (response) {
                        var commonResult = response.data;
                        if (commonResult.isSuccess) {
                            $('#myModal2').modal('hide');
                            $('#carModal').modal('hide');
                            vm.getTableData();
                        } else {
                            vm.$message.error(commonResult.message);
                        }
                    }).catch(function (error) {
                        console.log(error);
                    });
                } else {
                    vm.$message("请选择要绑定的车辆");
                }
            },
        },
        created() {
            this.getTableData();
        },
        mounted() {
            this.queryUnitTree();
            //清除弹窗原数据
            $("#carModal").on("shown.bs.modal", function () {
                vm.carTableSearchWhere = {
                    name: '',
                    unitid: null,
                    code: ''
                }
                vm.carTableSelect();
            });
            $('#myModal').on('shown.bs.modal', function (e) {
                var map = new EzMap('map');
                //设置地图级别
                map.zoomTo(8);
                var centerCoord = new EzCoord(106.661876, 26.609144);
                map.centerAtLatlng(centerCoord);
                var drawbtn = document.getElementById("drawbtn");
                if (vm.pageMode == "view") {
                    $("#divAdd").hide();
                    $(".btn-primary").hide();
                    $("#divView").append("<label>区域名称:" + vm.row.AREANAME + "</label>")
                    var coord = [];
                    var areaDetails = vm.row.AreaDetailsOrderBy;
                    if (Array.isArray(areaDetails)) {
                        for (var i = 0; i < areaDetails.length; i++) {
                            coord.push(areaDetails[i].LONGTITUDE / 1000000);
                            coord.push(areaDetails[i].LATITUDE / 1000000);
                        }
                    }
                    var feature;
                    ///区域类型 0 矩形1 多边形 2 圆形3线路,4点
                    if (vm.row.AREATYPE == 0) {
                        feature = new Rectangle(coord.join(), undefined)
                    } else if (vm.row.AREATYPE == 1) {
                        feature = new Polygon(coord.join(), undefined)
                    } else {
                        var circleCoord = new EzCoord(coord[0], coord[1]);
                        feature = new Circle(circleCoord, coord[2] * 1000000, undefined);
                    }
                    map.addOverlay(feature);
                    map.centerAndZoom(feature.getCenter(), 12)
                } else {
                    $("#divView").hide();
                    drawbtn.addEventListener("click", function () {
                        map.clear();
                        vm.map.points = [];
                        var selectElement = document.getElementById("drawtype");
                        var type = selectElement[selectElement.selectedIndex].value;
                        map.changeDragMode(type, function (/** feature为Ez.g.*要素类 */feature) {
                            /** 一般鼠标右键结束绘制,回调参数为动态绘制的要素,可以在回调中进行余下操作,例如，增加绘制要素到地图上. */
                            if (type != "drawCircle") {
                                vm.map.points = feature.getPoints();
                            } else {
                                var radius = feature.getRadius();
                                var center = feature.getCenter();
                                var laji = [];
                                laji.push(center.coordinate_);
                                laji.push([radius, 0]);
                                vm.map.points.push(laji);
                            }
                            map.addOverlay(feature);
                        });
                    });
                    var clearbtn = document.getElementById("clearbtn");
                    clearbtn.addEventListener("click", function () {
                        map.clear();
                        vm.map.points = [];
                    });
                }
            });
        }
    });
</script>

